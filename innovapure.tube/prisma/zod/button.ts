import * as z from "zod"
import { Locale } from "@prisma/client"
import { CompleteCatalogCard, RelatedCatalogCardModel, CompleteSlide, RelatedSlideModel, CompleteForm, RelatedFormModel, CompleteHeader, RelatedHeaderModel, CompleteFooter, RelatedFooterModel } from "./index"

export const ButtonModel = z.object({
  /**
   * The unique identifier for the lead
   * @default {Generated by database}
   */
  id: z.string(),
  /**
   * button text
   */
  text: z.string().trim().min(1).max(80),
  /**
   * button locale
   */
  locale: z.nativeEnum(Locale),
  /**
   * whether button is published
   */
  isPublished: z.boolean(),
})

export interface CompleteButton extends z.infer<typeof ButtonModel> {
  catalogCards: CompleteCatalogCard[]
  slides: CompleteSlide[]
  forms: CompleteForm[]
  headers: CompleteHeader[]
  footers: CompleteFooter[]
}

/**
 * RelatedButtonModel contains all relations on your model in addition to the scalars
 *
 * NOTE: Lazy required in case of potential circular dependencies within schema
 */
export const RelatedButtonModel: z.ZodSchema<CompleteButton> = z.lazy(() => ButtonModel.extend({
  /**
   * catalogCards with this button
   */
  catalogCards: RelatedCatalogCardModel.array(),
  /**
   * slides with this button
   */
  slides: RelatedSlideModel.array(),
  /**
   * forms with this button
   */
  forms: RelatedFormModel.array(),
  /**
   * headers with this button
   */
  headers: RelatedHeaderModel.array(),
  /**
   * footers with this button
   */
  footers: RelatedFooterModel.array(),
}))
