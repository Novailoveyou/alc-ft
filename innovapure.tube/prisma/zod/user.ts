import * as z from "zod"
import { Locale } from "@prisma/client"
import { CompletePhoneNumer, RelatedPhoneNumerModel, CompleteEmail, RelatedEmailModel, CompleteImage, RelatedImageModel, CompleteAccount, RelatedAccountModel, CompleteSession, RelatedSessionModel } from "./index"

export const UserModel = z.object({
  /**
   * The unique identifier for the record
   * @default {Generated by database}
   */
  id: z.string(),
  locale: z.nativeEnum(Locale),
  isPublished: z.boolean(),
  createdAt: z.date(),
  updatedAt: z.date(),
  /**
   * user name
   */
  name: z.string().trim().min(2).max(100).optional().nullish(),
  /**
   * user personal data usage agreement
   */
  isDataUsageAgreement: z.boolean(),
  phoneNumberValue: z.string(),
  emailValue: z.string(),
  emailVerified: z.date().nullish(),
  imageSrc: z.string(),
})

export interface CompleteUser extends z.infer<typeof UserModel> {
  phoneNumber: CompletePhoneNumer
  email: CompleteEmail
  image: CompleteImage
  accounts: CompleteAccount[]
  sessions: CompleteSession[]
}

/**
 * RelatedUserModel contains all relations on your model in addition to the scalars
 *
 * NOTE: Lazy required in case of potential circular dependencies within schema
 */
export const RelatedUserModel: z.ZodSchema<CompleteUser> = z.lazy(() => UserModel.extend({
  phoneNumber: RelatedPhoneNumerModel,
  email: RelatedEmailModel,
  image: RelatedImageModel,
  accounts: RelatedAccountModel.array(),
  sessions: RelatedSessionModel.array(),
}))
