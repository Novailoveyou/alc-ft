generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma"
  output   = "./zod" // (default) the directory where generated zod schemas will be saved

  // TODO: make this work .refine(imports.isURL)
  // imports  = "../zod-schemas"

  relationModel = true // (default) Create and export both plain and related models.
  // relationModel         = "default" // Do not export model without relations.
  // relationModel         = false // Do not generate related model

  modelCase = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
  // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

  modelSuffix = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas

  // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
  useDecimalJs = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

  // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
  prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
  // prismaJsonNullability = false // allows null assignment to optional JSON fields
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL") // uses connection pooling
}

enum Locale {
  ru
  en
  kk
  be
}

enum LocaleTo {
  ru
  en
  kk
  be
}

enum PageName {
  home
  catalog
  manucfacturer
  category
  product
  cart
  articles
  article
  about
  usage
  docs
  contact
  lead
}

model Image {
  /// The unique identifier for the record
  /// @default {Generated by database}
  id String @id @default(cuid())

  /// locale of the record
  /// @default {ru}
  locale Locale @default(ru)

  /// whether record is published
  /// @default {false}
  isPublished Boolean @default(false)

  /// date of record creation
  /// @default {now()}
  createdAt DateTime @default(now()) @map(name: "created_at")

  /// date of record update
  /// @default {now()}
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

  /// link to the image
  /// @zod.trim().min(3).max(3000)
  src String

  /// alternative text for the image
  /// @zod.trim().min(2).max(5000)
  alt String

  /// width of the image
  /// @zod.int().gte(12).lte(2560)
  width Int

  /// height of the image
  /// @zod.int().gte(12).lte(2560)
  height Int

  /// slides with this image
  slides Slide[]

  /// categories with this image
  categories Category[]

  /// testimonials with this image
  testimonials Testimonial[]

  /// products with this image
  product Product[]

  @@map(name: "images")
}

model PhoneNumer {
  /// The unique identifier for the record
  /// @default {Generated by database}
  id String @id @default(cuid())

  /// locale of the record
  /// @default {ru}
  locale Locale @default(ru)

  /// whether record is published
  /// @default {false}
  isPublished Boolean @default(false)

  /// date of record creation
  /// @default {now()}
  createdAt DateTime @default(now()) @map(name: "created_at")

  /// date of record update
  /// @default {now()}
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

  /// phone value
  /// @zod.trim().min(1).max(120)
  value String

  /// phone label
  /// @zod.trim().min(1).max(120).optional()
  label String?

  /// buttons with this phone number
  buttons Button[]

  @@unique([value])
  @@map(name: "contactPhoneNumbers")
}

model Email {
  /// The unique identifier for the record
  /// @default {Generated by database}
  id String @id @default(cuid())

  /// locale of the record
  /// @default {ru}
  locale Locale @default(ru)

  /// whether record is published
  /// @default {false}
  isPublished Boolean @default(false)

  /// date of record creation
  /// @default {now()}
  createdAt DateTime @default(now()) @map(name: "created_at")

  /// date of record update
  /// @default {now()}
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

  /// email value
  /// @zod.trim().min(1).max(320)
  value String

  /// email label
  /// @zod.trim().min(1).max(320).optional()
  label String?

  /// buttons with this email
  buttons Button[]

  @@unique([value])
  @@map(name: "contactEmails")
}

model Address {
  /// The unique identifier for the record
  /// @default {Generated by database}
  id String @id @default(cuid())

  /// locale of the record
  /// @default {ru}
  locale Locale @default(ru)

  /// whether record is published
  /// @default {false}
  isPublished Boolean @default(false)

  /// date of record creation
  /// @default {now()}
  createdAt DateTime @default(now()) @map(name: "created_at")

  /// date of record update
  /// @default {now()}
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

  /// address value - link to ya maps
  /// @zod.trim().min(1).max(1000)
  value String

  /// address label
  /// @zod.trim().min(1).max(320).optional()
  label String?

  /// buttons with this email
  buttons Button[]

  @@unique([value])
  @@map(name: "addresses")
}

model Button {
  /// The unique identifier for the record
  /// @default {Generated by database}
  id String @id @default(cuid())

  /// locale of the record
  /// @default {ru}
  locale Locale @default(ru)

  /// whether record is published
  /// @default {false}
  isPublished Boolean @default(false)

  /// date of record creation
  /// @default {now()}
  createdAt DateTime @default(now()) @map(name: "created_at")

  /// date of record update
  /// @default {now()}
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

  /// button text
  /// @zod.trim().min(1).max(80)
  text String

  /// if button is intended to be a trigger to phone call, then phoneNumber is the number to call
  phoneNumber   PhoneNumer? @relation(fields: [phoneNumberId], references: [id])
  phoneNumberId String?

  /// if button is intended to be a trigger to email, then email is the email to send to
  email   Email?  @relation(fields: [emailId], references: [id])
  emailId String?

  /// if button is intended to be an address, then address is the address
  address   Address? @relation(fields: [addressId], references: [id])
  addressId String?

  /// if button is intended to be a link, then linkTo is the link
  linkTo PageName?

  /// if button is intended to be a language change, then localeTo is the language
  localeTo LocaleTo?

  /// categories with this button
  categories Category[]

  /// slides with this button
  slides Slide[]

  /// forms with this button
  forms Form[]

  /// headers with this button
  headers Header[]

  /// footers with this button
  footers Footer[]

  /// products with this button
  products Product[]

  @@map(name: "buttons")
}

model Slide {
  /// The unique identifier for the record
  /// @default {Generated by database}
  id String @id @default(cuid())

  /// locale of the record
  /// @default {ru}
  locale Locale @default(ru)

  /// whether record is published
  /// @default {false}
  isPublished Boolean @default(false)

  /// date of record creation
  /// @default {now()}
  createdAt DateTime @default(now()) @map(name: "created_at")

  /// date of record update
  /// @default {now()}
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

  /// an element with border above the title
  /// @zod.trim().min(1).max(80)
  strap String

  /// slide title
  /// @zod.trim().min(3).max(3000)
  title String

  /// slide subtitle
  /// @zod.trim().min(3).max(3000).optional()
  subtitle String?

  /// Whether the slide has cornered rectangle positioned just right of the image
  isDecoration Boolean @default(true)

  /// Slide image
  image   Image  @relation(fields: [imageId], references: [id])
  imageId String

  /// SectionGallery with this slide
  sectionGallery   SectionGallery? @relation(fields: [sectionGalleryId], references: [id])
  sectionGalleryId String?

  /// Slide button
  buttons Button[]

  @@map(name: "slides")
}

model Testimonial {
  /// The unique identifier for the record
  /// @default {Generated by database}
  id String @id @default(cuid())

  /// locale of the record
  /// @default {ru}
  locale Locale @default(ru)

  /// whether record is published
  /// @default {false}
  isPublished Boolean @default(false)

  /// date of record creation
  /// @default {now()}
  createdAt DateTime @default(now()) @map(name: "created_at")

  /// date of record update
  /// @default {now()}
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

  /// testimonial title
  /// @zod.trim().min(1).max(60)
  title String

  /// testimonial description
  /// @zod.trim().min(1).max(300)
  description String

  /// testimonial image
  image   Image  @relation(fields: [imageId], references: [id])
  imageId String

  sectionTestimonials SectionTestimonials[]

  @@map(name: "testimonials")
}

model Form {
  /// The unique identifier for the record
  /// @default {Generated by database}
  id String @id @default(cuid())

  /// locale of the record
  /// @default {ru}
  locale Locale @default(ru)

  /// whether record is published
  /// @default {false}
  isPublished Boolean @default(false)

  /// date of record creation
  /// @default {now()}
  createdAt DateTime @default(now()) @map(name: "created_at")

  /// date of record update
  /// @default {now()}
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

  /// form title
  /// @zod.trim().min(3).max(60)
  title String

  /// form description
  /// @zod.trim().min(3).max(120)
  description String

  /// is user name input field displayed on the form
  isName Boolean? @default(false)

  /// is user phone number input field displayed on the form
  isPhoneNumber Boolean? @default(true)

  /// is email input field displayed on the form
  isEmail Boolean? @default(false)

  /// is user agreement input field displayed on the form
  isAgreement Boolean @default(true)

  /// form button
  button   Button @relation(fields: [buttonId], references: [id])
  buttonId String

  /// footers with this form
  footers Footer[]

  /// products with this form
  product Product[]

  @@map(name: "forms")
}

model Category {
  /// The unique identifier for the record
  /// @default {Generated by database}
  id String @id @default(cuid())

  /// locale of the record
  /// @default {ru}
  locale Locale @default(ru)

  /// whether record is published
  /// @default {false}
  isPublished Boolean @default(false)

  /// date of record creation
  /// @default {now()}
  createdAt DateTime @default(now()) @map(name: "created_at")

  /// date of record update
  /// @default {now()}
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

  /// category slug
  /// @zod.trim()
  slug String @default(uuid())

  /// category name
  /// @zod.trim().min(2).max(100)
  name String

  /// category short description
  /// @zod.trim().min(3).max(300)
  description String

  /// category long description
  /// @zod.trim().min(3).max(1200)
  longDescription String?

  /// Image with this card
  image   Image  @relation(fields: [imageId], references: [id])
  imageId String

  /// button with this card
  button   Button @relation(fields: [buttonId], references: [id])
  buttonId String

  /// category sectionCategory
  sectionCategory SectionCategory[]

  /// category sectionCatalogs
  sectionCatalogs SectionCatalog[]

  /// category products
  products Product[]

  @@unique([slug])
  @@map(name: "categories")
}

model ProductTestimonial {
  /// The unique identifier for the record
  /// @default {Generated by database}
  id String @id @default(cuid())

  /// locale of the record
  /// @default {ru}
  locale Locale @default(ru)

  /// whether record is published
  /// @default {false}
  isPublished Boolean @default(false)

  /// date of record creation
  /// @default {now()}
  createdAt DateTime @default(now()) @map(name: "created_at")

  /// date of record update
  /// @default {now()}
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

  /// ProductTestimonial title
  /// @zod.trim().min(3).max(80)
  title String

  /// ProductTestimonial product
  product Product[]

  @@map(name: "productTestimonials")
}

model ParameterLabel {
  /// The unique identifier for the record
  /// @default {Generated by database}
  id String @id @default(cuid())

  /// locale of the record
  /// @default {ru}
  locale Locale @default(ru)

  /// whether record is published
  /// @default {false}
  isPublished Boolean @default(false)

  /// date of record creation
  /// @default {now()}
  createdAt DateTime @default(now()) @map(name: "created_at")

  /// date of record update
  /// @default {now()}
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

  /// parameter label name
  /// @zod.trim().min(1).max(240)
  name String

  parameters Parameter[]

  @@unique([name])
  @@map(name: "parameterLabels")
}

model Parameter {
  /// The unique identifier for the record
  /// @default {Generated by database}
  id String @id @default(cuid())

  /// locale of the record
  /// @default {ru}
  locale Locale @default(ru)

  /// whether record is published
  /// @default {false}
  isPublished Boolean @default(false)

  /// date of record creation
  /// @default {now()}
  createdAt DateTime @default(now()) @map(name: "created_at")

  /// date of record update
  /// @default {now()}
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

  /// parameter value
  /// @zod.trim().min(1).max(240)
  value String

  /// whether parameter is highlighted
  isHighlighted Boolean @default(false)

  /// parameter label
  label     ParameterLabel @relation(fields: [labelName], references: [name])
  labelName String

  /// parameter product
  products Product[]

  @@map(name: "parameters")
}

model Product {
  /// The unique identifier for the record
  /// @default {Generated by database}
  id String @id @default(cuid())

  /// locale of the record
  /// @default {ru}
  locale Locale @default(ru)

  /// whether record is published
  /// @default {false}
  isPublished Boolean @default(false)

  /// date of record creation
  /// @default {now()}
  createdAt DateTime @default(now()) @map(name: "created_at")

  /// date of record update
  /// @default {now()}
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

  /// product slug
  /// @zod.trim()
  slug String @default(uuid())

  /// product name
  /// @zod.trim().min(2).max(100)
  name String

  /// short descriptoon
  /// @zod.trim().min(3).max(120)
  description String

  /// product description
  /// @zod.trim().min(3).max(1200).optional()
  longDescription String?

  /// product category
  category     Category @relation(fields: [categorySlug], references: [slug])
  categorySlug String

  /// product form
  form   Form   @relation(fields: [formId], references: [id])
  formId String

  /// product image
  image   Image  @relation(fields: [imageId], references: [id])
  imageId String

  /// product sectionProducts
  sectionProduct SectionProduct[]

  /// product parameters
  parameters Parameter[]

  /// product testimonials
  productTestimonials ProductTestimonial[]

  /// product buttons
  buttons Button[]

  @@unique([categorySlug, slug], name: "unique_category_product_slug")
  @@map(name: "products")
}

model Header {
  /// The unique identifier for the record
  /// @default {Generated by database}
  id String @id @default(cuid())

  /// locale of the record
  /// @default {ru}
  locale Locale @default(ru)

  /// whether record is published
  /// @default {false}
  isPublished Boolean @default(false)

  /// date of record creation
  /// @default {now()}
  createdAt DateTime @default(now()) @map(name: "created_at")

  /// date of record update
  /// @default {now()}
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

  /// header buttons
  buttons Button[]

  /// pages with this header
  pages Page[]

  @@map(name: "headers")
}

model SectionGallery {
  /// The unique identifier for the record
  /// @default {Generated by database}
  id String @id @default(cuid())

  /// locale of the record
  /// @default {ru}
  locale Locale @default(ru)

  /// whether record is published
  /// @default {false}
  isPublished Boolean @default(false)

  /// date of record creation
  /// @default {now()}
  createdAt DateTime @default(now()) @map(name: "created_at")

  /// date of record update
  /// @default {now()}
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

  /// gallery slides 
  slides Slide[]

  /// pages with this section
  pages Page[]

  @@map(name: "sectionGalleries")
}

model SectionCatalog {
  /// The unique identifier for the record
  /// @default {Generated by database}
  id String @id @default(cuid())

  /// locale of the record
  /// @default {ru}
  locale Locale @default(ru)

  /// whether record is published
  /// @default {false}
  isPublished Boolean @default(false)

  /// date of record creation
  /// @default {now()}
  createdAt DateTime @default(now()) @map(name: "created_at")

  /// date of record update
  /// @default {now()}
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

  /// section title
  /// @zod.trim().min(1).max(60)
  title String

  /// section categories
  categories Category[]

  /// pages with this section
  pages Page[]

  @@map(name: "sectionCatalogs")
}

model SectionTestimonials {
  /// The unique identifier for the record
  /// @default {Generated by database}
  id String @id @default(cuid())

  /// locale of the record
  /// @default {ru}
  locale Locale @default(ru)

  /// whether record is published
  /// @default {false}
  isPublished Boolean @default(false)

  /// date of record creation
  /// @default {now()}
  createdAt DateTime @default(now()) @map(name: "created_at")

  /// date of record update
  /// @default {now()}
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

  /// section title
  /// @zod.trim().min(1).max(60)
  title String

  /// section testimonials
  testimonials Testimonial[]

  /// pages with this section
  pages Page[]

  @@map(name: "sectionTestimonials")
}

model SectionCategory {
  /// The unique identifier for the record
  /// @default {Generated by database}
  id String @id @default(cuid())

  /// locale of the record
  /// @default {ru}
  locale Locale @default(ru)

  /// whether record is published
  /// @default {false}
  isPublished Boolean @default(false)

  /// date of record creation
  /// @default {now()}
  createdAt DateTime @default(now()) @map(name: "created_at")

  /// date of record update
  /// @default {now()}
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

  /// section category
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  /// pages with this section
  pages Page[]

  @@map(name: "sectionCategories")
}

model SectionProduct {
  /// The unique identifier for the record
  /// @default {Generated by database}
  id String @id @default(cuid())

  /// locale of the record
  /// @default {ru}
  locale Locale @default(ru)

  /// whether record is published
  /// @default {false}
  isPublished Boolean @default(false)

  /// date of record creation
  /// @default {now()}
  createdAt DateTime @default(now()) @map(name: "created_at")

  /// date of record update
  /// @default {now()}
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

  /// product
  product   Product @relation(fields: [productId], references: [id])
  productId String

  /// pages with this section
  pages Page[]

  @@map(name: "sectionProducts")
}

model Footer {
  /// The unique identifier for the record
  /// @default {Generated by database}
  id String @id @default(cuid())

  /// locale of the record
  /// @default {ru}
  locale Locale @default(ru)

  /// whether record is published
  /// @default {false}
  isPublished Boolean @default(false)

  /// date of record creation
  /// @default {now()}
  createdAt DateTime @default(now()) @map(name: "created_at")

  /// date of record update
  /// @default {now()}
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

  /// footer form
  form   Form?   @relation(fields: [formId], references: [id])
  formId String?

  /// footer buttons
  buttons Button[]

  /// pages with this footer
  pages Page[]

  @@map(name: "footers")
}

model Page {
  /// The unique identifier for the record
  /// @default {Generated by database}
  id String @id @default(cuid())

  /// locale of the record
  /// @default {ru}
  locale Locale @default(ru)

  /// whether record is published
  /// @default {false}
  isPublished Boolean @default(false)

  /// date of record creation
  /// @default {now()}
  createdAt DateTime @default(now()) @map(name: "created_at")

  /// date of record update
  /// @default {now()}
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

  /// page name
  name PageName @default(home)

  /// page header
  header   Header? @relation(fields: [headerId], references: [id])
  headerId String?

  /// page gallery section
  sectionGallery   SectionGallery? @relation(fields: [sectionGalleryId], references: [id])
  sectionGalleryId String?

  /// page catalog section
  sectionCatalog   SectionCatalog? @relation(fields: [sectionCatalogId], references: [id])
  sectionCatalogId String?

  /// page testimonials section
  sectionTestimonials   SectionTestimonials? @relation(fields: [sectionTestimonialsId], references: [id])
  sectionTestimonialsId String?

  /// page category section
  sectionCategory   SectionCategory? @relation(fields: [sectionCategoryId], references: [id])
  sectionCategoryId String?

  /// page product section
  sectionProduct   SectionProduct? @relation(fields: [sectionProductId], references: [id])
  sectionProductId String?

  /// page footer
  footer   Footer? @relation(fields: [footerId], references: [id])
  footerId String?

  @@unique([name])
  @@map(name: "pages")
}

model Lead {
  /// The unique identifier for the lead
  /// @default {Generated by database}
  id String @id @default(cuid())

  /// User who submitted the lead
  user   User   @relation(fields: [userId], references: [id])
  userId String

  /// user url from which the request came
  /// @zod.trim().min(1).max(10000)
  url String

  /// form name on the page from which the lead came
  /// @zod.trim().min(1).max(100)
  formName String

  /// user ip
  /// @zod.trim().min(1).max(39)
  ip String

  /// Google analitics client ID
  /// @zod.trim().min(1).max(100).optional()
  gmClientId String?

  /// Yandex metrics ID
  /// @zod.trim().min(1).max(100).optional()
  ymClientID String?

  /// user agent
  /// @zod.trim().min(1).max(100)
  userAgent String

  /// user utm_source url param
  /// @zod.trim().min(1).max(400).optional()
  utm_source String?

  /// user utm_medium url param
  /// @zod.trim().min(1).max(400).optional()
  utm_medium String?

  /// user utm_campaign url param
  /// @zod.trim().min(1).max(400).optional()
  utm_campaign String?

  /// user utm_content url param
  /// @zod.trim().min(1).max(400).optional()
  utm_content String?

  /// user utm_term url param
  /// @zod.trim().min(1).max(400).optional()
  utm_term String?

  /// createdAt user date at the request time
  /// @zod.custom(z.coerce.date())
  createdAt DateTime @default(now()) @map(name: "created_at")

  /// lead locale
  locale Locale @default(ru)

  @@map(name: "leads")
}

model User {
  /// The unique identifier for the user
  /// @default {Generated by database}
  id String @id @default(cuid())

  /// user name
  /// @zod.trim().min(2).max(100).optional()
  name String?

  /// user personal data usage agreement
  /// @zod.custom(z.literal(true))
  isDataUsageAgreement Boolean @default(false)

  /// user company
  /// @zod.trim().min(5).max(200).optional()
  company String?

  /// createdAt user date at the request time
  /// @zod.custom(z.coerce.date())
  createdAt DateTime @default(now()) @map(name: "created_at")

  /// updatedAt user date at the request time 
  /// @zod.custom(z.coerce.date())
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  /// user locale
  locale Locale @default(ru)

  leads Lead[]

  @@map(name: "users")
}
