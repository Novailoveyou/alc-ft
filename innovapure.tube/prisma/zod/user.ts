import * as z from "zod"
import { Locale } from "@prisma/client"
import { CompleteLead, RelatedLeadModel } from "./index"

export const UserModel = z.object({
  /**
   * The unique identifier for the user
   * @default {Generated by database}
   */
  id: z.string(),
  /**
   * user name
   */
  name: z.string().trim().min(2).max(100).optional().nullish(),
  /**
   * user personal data usage agreement
   */
  isDataUsageAgreement: z.literal(true),
  /**
   * user company
   */
  company: z.string().trim().min(5).max(200).optional().nullish(),
  /**
   * createdAt user date at the request time
   */
  createdAt: z.coerce.date(),
  /**
   * updatedAt user date at the request time 
   */
  updatedAt: z.coerce.date(),
  /**
   * user locale
   */
  locale: z.nativeEnum(Locale),
})

export interface CompleteUser extends z.infer<typeof UserModel> {
  leads: CompleteLead[]
}

/**
 * RelatedUserModel contains all relations on your model in addition to the scalars
 *
 * NOTE: Lazy required in case of potential circular dependencies within schema
 */
export const RelatedUserModel: z.ZodSchema<CompleteUser> = z.lazy(() => UserModel.extend({
  leads: RelatedLeadModel.array(),
}))
