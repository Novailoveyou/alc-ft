import * as z from "zod"
import { Locale } from "@prisma/client"
import { CompleteImage, RelatedImageModel, CompleteSectionGallery, RelatedSectionGalleryModel, CompleteButton, RelatedButtonModel } from "./index"

export const SlideModel = z.object({
  /**
   * The unique identifier for the record
   * @default {Generated by database}
   */
  id: z.string(),
  /**
   * locale of the record
   * @default {ru}
   */
  locale: z.nativeEnum(Locale),
  /**
   * whether record is published
   * @default {false}
   */
  isPublished: z.boolean(),
  /**
   * date of record creation
   * @default {now()}
   */
  createdAt: z.date(),
  /**
   * date of record update
   * @default {now()}
   */
  updatedAt: z.date(),
  /**
   * an element with border above the title
   */
  strap: z.string().trim().min(1).max(80),
  /**
   * slide title
   */
  title: z.string().trim().min(3).max(3000),
  /**
   * slide subtitle
   */
  subtitle: z.string().trim().min(3).max(3000).optional().nullish(),
  /**
   * Whether the slide has cornered rectangle positioned just right of the image
   */
  isDecoration: z.boolean(),
  imageId: z.string(),
  sectionGalleryId: z.string().nullish(),
})

export interface CompleteSlide extends z.infer<typeof SlideModel> {
  image: CompleteImage
  sectionGallery?: CompleteSectionGallery | null
  buttons: CompleteButton[]
}

/**
 * RelatedSlideModel contains all relations on your model in addition to the scalars
 *
 * NOTE: Lazy required in case of potential circular dependencies within schema
 */
export const RelatedSlideModel: z.ZodSchema<CompleteSlide> = z.lazy(() => SlideModel.extend({
  /**
   * Slide image
   */
  image: RelatedImageModel,
  /**
   * SectionGallery with this slide
   */
  sectionGallery: RelatedSectionGalleryModel.nullish(),
  /**
   * Slide button
   */
  buttons: RelatedButtonModel.array(),
}))
