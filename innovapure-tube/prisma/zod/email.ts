import * as z from "zod"
import { Locale } from "@prisma/client"
import { CompleteButton, RelatedButtonModel, CompleteUser, RelatedUserModel } from "./index"

export const EmailModel = z.object({
  /**
   * The unique identifier for the record
   * @default {Generated by database}
   */
  id: z.string(),
  locale: z.nativeEnum(Locale),
  isPublished: z.boolean(),
  createdAt: z.date(),
  updatedAt: z.date(),
  /**
   * email value
   */
  value: z.string().trim().min(1).max(320),
  /**
   * email label
   */
  label: z.string().trim().min(1).max(320).optional().nullish(),
})

export interface CompleteEmail extends z.infer<typeof EmailModel> {
  buttons: CompleteButton[]
  user?: CompleteUser | null
}

/**
 * RelatedEmailModel contains all relations on your model in addition to the scalars
 *
 * NOTE: Lazy required in case of potential circular dependencies within schema
 */
export const RelatedEmailModel: z.ZodSchema<CompleteEmail> = z.lazy(() => EmailModel.extend({
  buttons: RelatedButtonModel.array(),
  user: RelatedUserModel.nullish(),
}))
