import * as z from "zod"
import { Locale } from "@prisma/client"
import { CompleteButton, RelatedButtonModel, CompleteImage, RelatedImageModel, CompleteSectionCatalog, RelatedSectionCatalogModel } from "./index"

export const CatalogCardModel = z.object({
  /**
   * The unique identifier for the product
   * @default {Generated by database}
   */
  id: z.string(),
  /**
   * card locale
   */
  locale: z.nativeEnum(Locale),
  /**
   * whether CatalogCard is published
   */
  isPublished: z.boolean(),
  /**
   * card name
   */
  name: z.string().trim().min(1).max(100),
  /**
   * card description
   */
  description: z.string().trim().min(3).max(320),
  buttonId: z.string(),
  imageId: z.string(),
  sectionCatalogId: z.string().nullish(),
})

export interface CompleteCatalogCard extends z.infer<typeof CatalogCardModel> {
  button: CompleteButton
  image: CompleteImage
  sectionCatalog?: CompleteSectionCatalog | null
}

/**
 * RelatedCatalogCardModel contains all relations on your model in addition to the scalars
 *
 * NOTE: Lazy required in case of potential circular dependencies within schema
 */
export const RelatedCatalogCardModel: z.ZodSchema<CompleteCatalogCard> = z.lazy(() => CatalogCardModel.extend({
  /**
   * button with this card
   */
  button: RelatedButtonModel,
  /**
   * Image with this card
   */
  image: RelatedImageModel,
  /**
   * SectionCatalog with this card
   */
  sectionCatalog: RelatedSectionCatalogModel.nullish(),
}))
