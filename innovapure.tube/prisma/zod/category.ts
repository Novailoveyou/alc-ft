import * as z from "zod"
import { Locale } from "@prisma/client"
import { CompleteImage, RelatedImageModel, CompleteButton, RelatedButtonModel, CompleteSectionCategory, RelatedSectionCategoryModel, CompleteSectionCatalog, RelatedSectionCatalogModel, CompleteProduct, RelatedProductModel } from "./index"

export const CategoryModel = z.object({
  /**
   * The unique identifier for the record
   * @default {Generated by database}
   */
  id: z.string(),
  /**
   * locale of the record
   * @default {ru}
   */
  locale: z.nativeEnum(Locale),
  /**
   * whether record is published
   * @default {false}
   */
  isPublished: z.boolean(),
  /**
   * date of record creation
   * @default {now()}
   */
  createdAt: z.date(),
  /**
   * date of record update
   * @default {now()}
   */
  updatedAt: z.date(),
  /**
   * category slug
   */
  slug: z.string().trim(),
  /**
   * category name
   */
  name: z.string().trim().min(2).max(100),
  /**
   * category short description
   */
  description: z.string().trim().min(3).max(300),
  /**
   * category long description
   */
  longDescription: z.string().trim().min(3).max(1200).nullish(),
  imageId: z.string(),
  buttonId: z.string(),
})

export interface CompleteCategory extends z.infer<typeof CategoryModel> {
  image: CompleteImage
  button: CompleteButton
  sectionCategory: CompleteSectionCategory[]
  sectionCatalogs: CompleteSectionCatalog[]
  products: CompleteProduct[]
}

/**
 * RelatedCategoryModel contains all relations on your model in addition to the scalars
 *
 * NOTE: Lazy required in case of potential circular dependencies within schema
 */
export const RelatedCategoryModel: z.ZodSchema<CompleteCategory> = z.lazy(() => CategoryModel.extend({
  /**
   * Image with this card
   */
  image: RelatedImageModel,
  /**
   * button with this card
   */
  button: RelatedButtonModel,
  /**
   * category sectionCategory
   */
  sectionCategory: RelatedSectionCategoryModel.array(),
  /**
   * category sectionCatalogs
   */
  sectionCatalogs: RelatedSectionCatalogModel.array(),
  /**
   * category products
   */
  products: RelatedProductModel.array(),
}))
